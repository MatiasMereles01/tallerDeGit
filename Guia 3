----Ejercicio 1a
f :: Int->Int
f(1) = 8
f(4) = 131
f(16) = 16


----1B
g :: Integer -> Integer
g (8) = 16
g (16) = 4
g (131) = 1 

----1C
----h :: Int -> Int
----h x = f (g x)


--k :: Int -> Int
--k x = g (f x)

----Ejercicio 2A
absoluto :: Int -> Int
absoluto x |  x >= 0 = x
           |  otherwise = -x

maximoabsoluto :: Integer -> Integer -> Integer
maximoabsoluto x y | x >= y = x
                   | otherwise = y



----2C
maximo3 :: Integer -> Integer -> Integer -> Integer
maximo3 x y z | x >= y && x >= z = x
              | y >= x && y >= z = y
              | otherwise = z


----2D SIN PATTERN MATCHING
algunoEs0 :: Float -> Float -> Bool
algunoEs0 x y | x == 0 || y == 0 = True
              | otherwise = False

----2D CON PATTERN MATCHING
algunoEs02 :: Float -> Float -> Bool
algunoEs02 x 0 = True
algunoEs02 0 y = True
algunoEs02 x y = False

             
----2E SIN PATTERN MATCHING
ambosSon0 :: Float -> Float -> Bool
ambosSon0 x y | x== 0 && y == 0 = True
              | otherwise = False

----2E CON PATTERN MATCHING
ambosSon02 :: Float -> Float -> Bool
ambosSon02 0 0 = True
ambosSon02 x y = False

----2F
mismoIntervalo :: Float -> Float -> Bool
mismoIntervalo x y | x <=3 && y <=3 = True
                   | x > 3 && y <= 7 = True
                   | x > 7 && y > 7 = True
                   | otherwise = False

----2G
sumaDistintos :: Int -> Int -> Int -> Int
sumaDistintos x y z | x == y && x == z = x
                    | x == y = x + z
                    | x == z = x + y
                    | y == z = x + y
                    | otherwise = x + y + z

----2H
esMultiploDe :: Int -> Int -> Bool
esMultiploDe x y | mod x y == 0 = True
                 | otherwise = False


----2I
digitoUnidades :: Int-> Int ---da el ultimo digito-----
digitoUnidades x = mod x 10

----2J
digitoDecenas :: Int -> Int ---Me da el del medio---
digitoDecenas x = mod (div x 10) 10

----Ejercicio 3
estanRelacionados :: Int -> Int -> Bool
estanRelacionados x y | x == 0 && y == 0 = False
                      | mod x y == 0 = True
                      | otherwise = False


----Ejercicio 4A
prodInt :: (Int,Int) -> (Int,Int) -> (Int,Int)
prodInt (a,b) (c,d) = (a*c, b*d)


----TUPLASSSSSSSSSSSSSSSSSS--------
----Ejercicio 4B
todoMenor :: (Int,Int) -> (Int,Int) -> Bool
todoMenor (a,b) (c,d) | a < c && b < d = True
                      | otherwise = False
    

----Ejercicio 4C
distanciaPuntos :: (Float, Float)-> (Float, Float) -> Float
distanciaPuntos (ax,ay) (bx, by) = ((bx - ax)**2) + ((by - ay)**2)

----Ejercicio 4D
sumaTerna :: (Int,Int,Int) -> Int
sumaTerna (x,y,z) = x + y + z



----Ejercicio 4E
sumarSoloMultiplos :: (Int,Int,Int) -> Int -> Int
sumarSoloMultiplos (a,b,c) x | mod a x == 0 && mod b x == 0 && mod c x == 0 = a + b + c
                             | mod a x == 0 && mod b x == 0 && mod c x /=0  = a + b
                             | mod a x == 0 && mod c x == 0 = a + c
                             | mod b x == 0 && mod c x == 0 = b + c
                             | mod a x == 0 = a 
                             | mod b x == 0 = b 
                             | mod c x == 0 = c                                 
                             | otherwise = 0



----Ejercicio 4f
posPrimerPar :: (Int, Int, Int) -> Int
posPrimerPar (a,b,c) | mod a 2 == 0 = a
                     | mod b 2 == 0 = b 
                     | mod c 2 == 0 = c 
                     | otherwise = 4




----Ejercicio 4G
crearPar :: a -> b -> (a, b)
crearPar a b = (a,b)


----Ejercicio 4H
invertir :: (a,b) -> (b,a)
invertir (a,b) = (b,a)


           
----Ejercicio 5
f2 :: Int -> Int 
f2 x | x <= 7 = x^2 
     | otherwise = 2*x -1

g2 :: Int -> Int 
g2 x | mod x 2 == 0 = div x 2 
     | otherwise = 3*x + 1


todosMenores :: (Int,Int,Int) -> Bool
todosMenores (a,b,c) |  f2(a) > g2(a) && f2(b) > g2(b) && f2(c) > g2(c) = True 
                     | otherwise = False




----Ejercicio 6
bisiesto :: Int ->Bool
bisiesto x | mod x 4 /= 0 || mod x 100 == 0 && mod x 400 /= 0 = False
           | otherwise = True


----Ejercicio 7
distanciaManhattan :: (Float, Float, Float) ->(Float, Float, Float) ->Float
distanciaManhattan (a,b,c) (d,e,f) = (a-d) + (b-e) + (c-f)

----Ejercicio 8
comparar :: Int ->Int ->Int
comparar a b | sumaUltimosDosDigitos(a) < sumaUltimosDosDigitos(b) = 1
             | sumaUltimosDosDigitos(a) > sumaUltimosDosDigitos(b) = -1
             | sumaUltimosDosDigitos(a) == sumaUltimosDosDigitos(b) = 0




sumaUltimosDosDigitos :: Int -> Int
sumaUltimosDosDigitos x = mod x 10 + mod (div x 10) 10
